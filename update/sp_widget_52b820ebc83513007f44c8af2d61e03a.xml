<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function(spUtil,$scope,$timeout) {
   /* widget controller */
   var c = this;

   /* Step 3. Accept user input */
	c.selectAg = function(record) {
		
		//Set a property on the data object to identify the selected object
		c.data.selectedAg = record.agValue;
		
		//Send the data object to the server script
		c.server.update();
	}
	
	//Sort Functionality
	c.sortOrder=false;
	c.changeSortCol=function(key){
		
		/* If the user is selecting the same column, reverse the sort order, 
		else set the order to false which forces a new sort in ascending order */
		if(key == c.orderCol)
			c.sortOrder = !c.sortOrder;
		else
			c.sortOrder = false;
		
		c.orderCol = key;
	}
	
	//Record Watch Functionality
	//a flag to indicate if a live update has been triggered by the record watcher
	c.updatedFromServer = false;
	
	/* empty string is a filter. For example, 'active=true' would
	only trigger the callback function when changes are made to
	active records */
	spUtil.recordWatch($scope, c.data.table, '', function(updatedObj){
		spUtil.update($scope);
		c.updatedFromServer = true;
		if (!c.updatedRegs) {
			c.updatedRegs = {}
		}
		
		/* add sys_ids of any changed records to an array
		this will allow us to highlight them in the HTML template */
		c.updatedRegs[changeObj.data.sys_id] = true;
		$timeout(function(){
			c.updatedRegs[changeObj.data.sys_id] = false;
		},6000)
	})
	
}	]]></client_script>
        <controller_as>c</controller_as>
        <css>.badge{background:red;}

.highlight{
  background-color:grey;
  color:white;
}</css>
        <data_table>sp_instance_table</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>table</field_list>
        <has_preview>true</has_preview>
        <id>table-summery</id>
        <internal>false</internal>
        <link><![CDATA[function(){
	$('.list'-group).on("click",".list-group-item",function(){
		$('.list-group').find('li.highlight').removeClass('highlight');
		$(this).addClass('highlight');
	});
}]]></link>
        <name>Table Summery</name>
        <option_schema>[{"name":"aggregate_field","section":"Data","label":"Aggregate field","type":"field_name"},{"name":"title","section":"Presentation","label":"Title","type":"string"},{"name":"display_fields","section":"Presentation","label":"Display Fields","type":"field_list"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {

	/* Step 1. Load initial data from the server */
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */

	if(!input) {
		data.summary = [];
		data.table = input&&input.table || $sp.getParameter('table') || options.table || 'incident';
		data.groupBy = input&&input.groupBy || $sp.getParameter('groupBy') || options.aggregate_field||'catagory';
		data.fields = input&&input.fields || $sp.getParameter('fields') || options.display_fields||'number,short_description,sys_updated_on';

		var ga = new GlideAggregate(data.table);
		ga.setGroup(true);
		ga.groupBy(data.groupBy);
		ga.addAggregate('COUNT');
		ga.query();

		while(ga.next()) {
			data.summary.push({
				agName:ga[data.groupBy].getDisplayValue() || 'None',
				agValue:ga[data.groupBy].toString(),
				agCount: ga.getAggregate('COUNT')
			});
		}

	}



	/* Step 4. Process user input */

	if(input) {
		//use to check that sysId is captured
		//console.log("Selected ag (from server): " + input.selectedAg);
		
		data.records=[];
		
		var gr = new GlideRecord(input.table) ;
		gr.addQuery(input.groupBy, input.selectedAg);
		gr.query();
		
		//get column headers
		data.labels=$sp.getFieldsObject(gr,input.fields);
		
		while (gr.next()) {
			var o = {};
			
			//use $sp utility methods rather than manually creating record objects
			$sp.getRecordDisplayValues(o,gr,input.fields);
			$sp.getRecordValues(o,gr,'sys_id');
			data.records.push(o);
		}
	}

})();	]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-05-06 22:11:33</sys_created_on>
        <sys_id>52b820ebc83513007f44c8af2d61e03a</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name>Table Summery</sys_name>
        <sys_package display_value="Cloud Dimensions Events" source="x_snc_cloudevents">77108b70610813007f44e59882b97a67</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cloud Dimensions Events">77108b70610813007f44e59882b97a67</sys_scope>
        <sys_update_name>sp_widget_52b820ebc83513007f44c8af2d61e03a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-05-07 18:07:36</sys_updated_on>
        <template><![CDATA[<form>
  
  <!-- Step 2. Display initial data from the server -->
  <div class="panel panel-default">
  <!-- Default panel contents -->
  <div class="panel-heading">
    <span class="fa fa-bolt"
          ng-show="c.updatedFromServer"></span>
    {{::options.title}}</div>

  <!-- List group -->
  <ul class="list-group">
    <li class="list-group-item"
        ng-repeat="s in c.data.summary"
        ng-click="c.selectAg(s)">{{ s.agName }}
    <span class="badge">{{ s.agCount }}</span>

    </li>

  </ul>
</div>
  
  
  <!-- Step 5. Display customized content based on user input -->
<table class="table cloud-widgets"
       ng-if="c.data.records">
	<thead>
		<tr>
			<th ng-repeat="(key,val) in c.data.labels"
          ng-click="c.changeSortCol(key)">{{val.label}}
      <!-- Only show and style the selected column -->
<span ng-show="c.orderCol==key">
	<span class="fa fa-sort-asc"
	ng-show="!c.sortOrder"></span>
	<span class="fa fa-sort-desc"
	ng-show="c.sortOrder"></span>
</span></th>
		</tr>
	</thead>

	<tbody>
      		<tr ng-repeat="record in c.data.records | orderBy: c.orderCol : c.sortOrder">
        		<td ng-repeat="(key,val) in c.data.labels">{{ record[key] }}</td>
      		</tr>
    	</tbody>
</table>
  
</form>
	]]></template>
    </sp_widget>
</record_update>
